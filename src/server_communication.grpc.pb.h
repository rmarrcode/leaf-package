// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_communication.proto
#ifndef GRPC_server_5fcommunication_2eproto__INCLUDED
#define GRPC_server_5fcommunication_2eproto__INCLUDED

#include "server_communication.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace leaftest {

class ServerCommunication final {
 public:
  static constexpr char const* service_full_name() {
    return "leaftest.ServerCommunication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::leaftest::TimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>> AsyncGetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>>(AsyncGetServerTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>> PrepareAsyncGetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>>(PrepareAsyncGetServerTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::leaftest::ForwardPassResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>> AsyncForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>>(AsyncForwardPassRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>> PrepareAsyncForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>>(PrepareAsyncForwardPassRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::leaftest::GradientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>> AsyncGetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>>(AsyncGetGradientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>> PrepareAsyncGetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>>(PrepareAsyncGetGradientsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>* AsyncGetServerTimeRaw(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::TimeResponse>* PrepareAsyncGetServerTimeRaw(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>* AsyncForwardPassRaw(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::ForwardPassResponse>* PrepareAsyncForwardPassRaw(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>* AsyncGetGradientsRaw(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leaftest::GradientResponse>* PrepareAsyncGetGradientsRaw(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::leaftest::TimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>> AsyncGetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>>(AsyncGetServerTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>> PrepareAsyncGetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>>(PrepareAsyncGetServerTimeRaw(context, request, cq));
    }
    ::grpc::Status ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::leaftest::ForwardPassResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>> AsyncForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>>(AsyncForwardPassRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>> PrepareAsyncForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>>(PrepareAsyncForwardPassRaw(context, request, cq));
    }
    ::grpc::Status GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::leaftest::GradientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>> AsyncGetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>>(AsyncGetGradientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>> PrepareAsyncGetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>>(PrepareAsyncGetGradientsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServerTime(::grpc::ClientContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response, std::function<void(::grpc::Status)>) override;
      void ForwardPass(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGradients(::grpc::ClientContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>* AsyncGetServerTimeRaw(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leaftest::TimeResponse>* PrepareAsyncGetServerTimeRaw(::grpc::ClientContext* context, const ::leaftest::TimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>* AsyncForwardPassRaw(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leaftest::ForwardPassResponse>* PrepareAsyncForwardPassRaw(::grpc::ClientContext* context, const ::leaftest::ForwardPassRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>* AsyncGetGradientsRaw(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leaftest::GradientResponse>* PrepareAsyncGetGradientsRaw(::grpc::ClientContext* context, const ::leaftest::GradientRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerTime_;
    const ::grpc::internal::RpcMethod rpcmethod_ForwardPass_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGradients_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetServerTime(::grpc::ServerContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response);
    virtual ::grpc::Status ForwardPass(::grpc::ServerContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response);
    virtual ::grpc::Status GetGradients(::grpc::ServerContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerTime() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerTime(::grpc::ServerContext* context, ::leaftest::TimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::leaftest::TimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ForwardPass() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardPass(::grpc::ServerContext* context, ::leaftest::ForwardPassRequest* request, ::grpc::ServerAsyncResponseWriter< ::leaftest::ForwardPassResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGradients() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradients(::grpc::ServerContext* context, ::leaftest::GradientRequest* request, ::grpc::ServerAsyncResponseWriter< ::leaftest::GradientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServerTime<WithAsyncMethod_ForwardPass<WithAsyncMethod_GetGradients<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerTime() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::leaftest::TimeRequest, ::leaftest::TimeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leaftest::TimeRequest* request, ::leaftest::TimeResponse* response) { return this->GetServerTime(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerTime(
        ::grpc::MessageAllocator< ::leaftest::TimeRequest, ::leaftest::TimeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leaftest::TimeRequest, ::leaftest::TimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerTime(
      ::grpc::CallbackServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ForwardPass() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::leaftest::ForwardPassRequest, ::leaftest::ForwardPassResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leaftest::ForwardPassRequest* request, ::leaftest::ForwardPassResponse* response) { return this->ForwardPass(context, request, response); }));}
    void SetMessageAllocatorFor_ForwardPass(
        ::grpc::MessageAllocator< ::leaftest::ForwardPassRequest, ::leaftest::ForwardPassResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leaftest::ForwardPassRequest, ::leaftest::ForwardPassResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardPass(
      ::grpc::CallbackServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGradients() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::leaftest::GradientRequest, ::leaftest::GradientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leaftest::GradientRequest* request, ::leaftest::GradientResponse* response) { return this->GetGradients(context, request, response); }));}
    void SetMessageAllocatorFor_GetGradients(
        ::grpc::MessageAllocator< ::leaftest::GradientRequest, ::leaftest::GradientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leaftest::GradientRequest, ::leaftest::GradientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServerTime<WithCallbackMethod_ForwardPass<WithCallbackMethod_GetGradients<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerTime() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ForwardPass() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGradients() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerTime() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ForwardPass() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardPass(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGradients() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGradients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerTime() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ForwardPass() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ForwardPass(context, request, response); }));
    }
    ~WithRawCallbackMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardPass(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGradients() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGradients(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGradients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerTime() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leaftest::TimeRequest, ::leaftest::TimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leaftest::TimeRequest, ::leaftest::TimeResponse>* streamer) {
                       return this->StreamedGetServerTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerTime(::grpc::ServerContext* /*context*/, const ::leaftest::TimeRequest* /*request*/, ::leaftest::TimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leaftest::TimeRequest,::leaftest::TimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ForwardPass : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ForwardPass() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leaftest::ForwardPassRequest, ::leaftest::ForwardPassResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leaftest::ForwardPassRequest, ::leaftest::ForwardPassResponse>* streamer) {
                       return this->StreamedForwardPass(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ForwardPass() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ForwardPass(::grpc::ServerContext* /*context*/, const ::leaftest::ForwardPassRequest* /*request*/, ::leaftest::ForwardPassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForwardPass(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leaftest::ForwardPassRequest,::leaftest::ForwardPassResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGradients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGradients() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leaftest::GradientRequest, ::leaftest::GradientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leaftest::GradientRequest, ::leaftest::GradientResponse>* streamer) {
                       return this->StreamedGetGradients(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGradients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGradients(::grpc::ServerContext* /*context*/, const ::leaftest::GradientRequest* /*request*/, ::leaftest::GradientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGradients(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leaftest::GradientRequest,::leaftest::GradientResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetServerTime<WithStreamedUnaryMethod_ForwardPass<WithStreamedUnaryMethod_GetGradients<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetServerTime<WithStreamedUnaryMethod_ForwardPass<WithStreamedUnaryMethod_GetGradients<Service > > > StreamedService;
};

}  // namespace leaftest


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_server_5fcommunication_2eproto__INCLUDED
